"""Database setup module for creating schema and tables."""
from __future__ import annotations

import os
from typing import Optional

import oracledb
from src.db import get_connection
from src.constants import env

# Initialize Oracle thin mode
oracledb.init_oracle_client(lib_dir=None)


def create_schema(cur) -> None:
    """Create the TELEGRAM_RAW schema with necessary privileges."""
    try:
        cur.execute("""
            CREATE USER telegram_raw IDENTIFIED BY telegram_raw_password
            DEFAULT TABLESPACE users
            TEMPORARY TABLESPACE temp
            QUOTA UNLIMITED ON users
        """)
        
        cur.execute("""
            GRANT CONNECT, RESOURCE TO telegram_raw
            GRANT CREATE SESSION TO telegram_raw
            GRANT UNLIMITED TABLESPACE TO telegram_raw
            GRANT CREATE TABLE TO telegram_raw
            GRANT CREATE SEQUENCE TO telegram_raw
            GRANT CREATE TRIGGER TO telegram_raw
        """)
        
        print("Schema telegram_raw created successfully")
        
    except Exception as e:
        if "ORA-01920" in str(e):  # User already exists
            print("Schema telegram_raw already exists")
        else:
            print(f"Error creating schema: {e}")
            raise


def create_tables(conn) -> None:
    """Create necessary tables in the TELEGRAM_RAW schema."""
    with conn.cursor() as cur:
        try:
            # Enable JSON support
            cur.execute("ALTER SESSION SET PLSQL_CCFLAGS = 'json_enabled:true'")
            
            # Create messages table
            cur.execute("""
                CREATE TABLE telegram_raw.messages (
                    message_id      NUMBER PRIMARY KEY,
                    channel_slug    VARCHAR2(100),
                    message_ts      TIMESTAMP,
                    payload         CLOB CHECK (payload IS JSON)
                )
            """)
            
            # Create image detections table
            cur.execute("""
                CREATE TABLE telegram_raw.image_detections (
                    detection_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    message_id      NUMBER REFERENCES telegram_raw.messages(message_id),
                    class_id        NUMBER,
                    confidence      NUMBER(5,4),
                    bbox_x1         NUMBER,
                    bbox_y1         NUMBER,
                    bbox_x2         NUMBER,
                    bbox_y2         NUMBER,
                    created_at      TIMESTAMP DEFAULT SYSTIMESTAMP
                )
            """)
            
            print("Tables created successfully")
            
        except Exception as e:
            if "ORA-00955" in str(e):  # Table already exists
                print("Tables already exist")
            else:
                raise


def setup_database() -> None:
    """Setup the database schema and tables."""
    print("Setting up database...")
    
    try:
        # First connect as SYSTEM
        system_conn = oracledb.connect(
            user="SYSTEM",
            password=os.getenv("ORACLE_PASSWORD"),
            dsn=os.getenv("ORACLE_DSN")
        )
        print("Connected as SYSTEM")
        
        with system_conn.cursor() as cur:
            # Create schema
            create_schema(cur)
            
            # Create tables
            create_tables(cur)
            
        print("Database setup complete!")
        
    except Exception as e:
        print(f"Error during setup: {e}")
        raise
    finally:
        if 'system_conn' in locals():
            system_conn.close()
